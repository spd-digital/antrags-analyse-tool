"""
Django settings for propositionguide project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

from dotenv import load_dotenv

dotenv_path = os.path.join(BASE_DIR, '.env')
load_dotenv(dotenv_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'j8rq(_+2)n#v^jf85*b_3@n(lp)y=ko@s3p-9udu35m%vog#9^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG') == u'true'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',

    'shared.email',
    'shared.file_storage',
    'shared',
    'accounts',
    'propositions',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'propositionguide.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.environ.get('DEFAULT_TEMPLATE_DIRECTORY')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'propositionguide.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'HOST': os.environ.get('DEFAULT_DB_HOST'),
        'PORT': os.environ.get('DEFAULT_DB_PORT'),
        'NAME': os.environ.get('DEFAULT_DB_NAME'),
        'USER': os.environ.get('DEFAULT_DB_USER'),
        'PASSWORD': os.environ.get('DEFAULT_DB_PASSWORD'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 25
}

STORAGE_ENGINE = os.environ.get('STORAGE_ENGINE', 'local_fs')

AWS = {
    's3': {
        'buckets': {
            'default': {
                'name': os.environ.get('AWS_S3_BUCKET_DEFAULT_NAME'),
                'host':  os.environ.get('AWS_S3_BUCKET_DEFAULT_HOST'),
                'access_key':  os.environ.get('AWS_S3_BUCKET_DEFAULT_ACCESS_KEY'),
                'secret_access_key':  os.environ.get('AWS_S3_BUCKET_DEFAULT_SECRET_ACCESS_KEY')
            }
        }
    }
}

SITE_PROTOCOL = os.environ.get('SITE_PROTOCOL')
SITE_SUBDOMAIN = os.environ.get('SITE_SUBDOMAIN')
SITE_DOMAIN = os.environ.get('SITE_DOMAIN')
SITE_PORT = os.environ.get('SITE_PORT')
SITE_HOST = u'{protocol}://{subdomain}{domain}{port}'.format(**{
    'protocol': SITE_PROTOCOL,
    'subdomain': u'{}.'.format(SITE_SUBDOMAIN) if SITE_SUBDOMAIN else u'',
    'domain': SITE_DOMAIN,
    'port': u':{}'.format(SITE_PORT) if SITE_PORT else u'',
})

CDN_HOST = u'https://{bucket_name}'.format(**{
    'bucket_name': os.environ.get('AWS_S3_BUCKET_DEFAULT_NAME')
})

DEFAULT_EMAIL_SENDER = os.environ.get('DEFAULT_EMAIL_SENDER')
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT'))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS') == u'true'

PRODUCTION_HOSTNAME = os.environ.get('PRODUCTION_HOSTNAME')
PRODUCTION = PRODUCTION_HOSTNAME == os.environ.get('PRODUCTION_HOSTNAME')
